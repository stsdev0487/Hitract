Scroll View Properties:
  contentContainerStyle: {}
  #Note that the view can always be scrolled by calling scrollTo.
  scrollEnabled: true
  horizontal: false
  pagingEnabled: false

  #A RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView. Only works for vertical ScrollViews (horizontal prop must be false).
  refreshControl: <Component>

  #Causes the scrollbars not to turn transparent when they are not in use.
  persistentScrollbar: false
  showsHorizontalScrollIndicator: true
  showsVerticalScrollIndicator: true


Layout:
  #ios
  #when true, the scroll view automatically centers the content when the content is smaller than the scroll view bounds; when the content is larger than the scroll view, this property has no effect.
  centerContent: false
  #The amount by which the scroll view content is inset from the edges of the scroll view.
  contentInset: {top: 0, left: 0, bottom: 0, right: 0}
  #Used to manually set the starting scroll offset. ios
  contentOffset: {x: 0, y: 0}
  #The amount by which the scroll view indicators are inset from the edges of the scroll view. This should normally be set to the same value as the contentInset.
  scrollIndicatorInsets: {top: 0, left: 0, bottom: 0, right: 0}


Listeners:
  #Called when scrollable content view of the ScrollView changes.
  #Handler function is passed the content width and content height as parameters: (contentWidth, contentHeight)
  #It's implemented using onLayout handler attached to the content container which this ScrollView renders.
  onContentSizeChange: (contentWidth, contentHeight)

  #Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).
  onMomentumScrollBegin: ()

  #Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).
  onMomentumScrollEnd: ()

  #Fires at most once per frame during scrolling.
  #The frequency of the events can be controlled using the scrollEventThrottle prop.
  onScroll: ()

  #Called when the user begins to drag the scroll view.
  onScrollBeginDrag: ()

  #Called when the user stops dragging the scroll view and it either stops or begins to glide.
  onScrollEndDrag: ()

  #ios - Fires when the scroll view scrolls to top after the status bar has been tapped.
  onScrollToTop: ()

  Methods:
    flashScrollIndicators: ()
    scrollTo: (y, object, x,  animated, duration)
    scrollToEnd: ({animated: boolean, duration: number})




Automatic:
  #Controls whether iOS should automatically adjust the content inset for scroll views that are placed behind a navigation bar or tab bar/ toolbar.
  automaticallyAdjustContentInsets: true

  #ios - When set, the scroll view will adjust the scroll position so that the first child that is currently visible and at or beyond minIndexForVisible will not change position. This is useful for lists that are loading content in both directions, e.g. a chat thread, where new messages coming in might otherwise cause the scroll position to jump. A value of 0 is common, but other values such as 1 can be used to skip loading spinners or other content that should not maintain position.
  #The optional autoscrollToTopThreshold can be used to make the content automatically scroll to the top after making the adjustment if the user was within the threshold of the top before the adjustment was made. This is also useful for chat-like applications where you want to see new messages scroll into place, but not if the user has scrolled up a ways and it would be disruptive to scroll a bunch.
  #Caveat 1: Reordering elements in the scrollview with this enabled will probably cause jumpiness and jank. It can be fixed, but there are currently no plans to do so. For now, don't re-order the content of any ScrollViews or Lists that use this feature.
  #Caveat 2: This simply uses contentOffset and frame.origin in native code to compute visibility. Occlusion, transforms, and other complexity won't be taken into account as to whether content is "visible" or not.
  maintainVisibleContentPosition: { minIndexForVisible: number, autoscrollToTopThreshold: number }

  #ios - This property specifies how the safe area insets are used to modify the content area of the scroll view.
  #The default value of this property is "never".
  #Available on iOS 11 and later.
  contentInsetAdjustmentBehavior: enum('automatic', 'scrollableAxes', 'never'*, 'always')


  #Experimental: When true, offscreen child views (whose overflow value is hidden) are removed from their native backing superview when offscreen.
  #This can improve scrolling performance on long lists.
  #The default value is true.
  removeClippedSubviews: true


Snap:
  #ios -
  #When snapToInterval is set, snapToAlignment will define the relationship of the snapping to the scroll view.
  #'start' (the default) will align the snap at the left (horizontal) or top (vertical).
  #'center' will align the snap in the center.
  #'end' will align the snap at the right (horizontal) or bottom (vertical).
  snapToAlignment: enum('start'*, 'center', 'end')

  #Use in conjunction with snapToOffsets. By default, the end of the list counts as a snap offset. Set snapToEnd to false to disable this behavior and allow the list to scroll freely between its end and the last snapToOffsets offset.
  snapToEnd: true

  #When set, causes the scroll view to stop at multiples of the value of snapToInterval.
  #This can be used for paginating through children that have lengths smaller than the scroll view.
  #Typically used in combination with snapToAlignment and decelerationRate="fast".
  #Overrides less configurable pagingEnabled prop.
  snapToInterval: number

  #When set, causes the scroll view to stop at the defined offsets.
  #This can be used for paginating through variously sized children that have lengths smaller than the scroll view.
  #Typically used in combination with decelerationRate="fast".
  #Overrides less configurable pagingEnabled and snapToInterval props.
  snapToOffsets: [number]

  #Use in conjunction with snapToOffsets. By default, the beginning of the list counts as a snap offset.
  #Set snapToStart to false to disable this behavior and allow the list to scroll freely between its start and the first snapToOffsets offset.
  snapToStart: true


Behavior:

  bounce:
    #ios
    alwaysBounceHorizontal: true if horizontal
    alwaysBounceVertical: false if horizontal
    bounces: true
    bouncesZoom: null

  header:
    invertStickyHeaders: false
    #An array of child indices determining which children get docked to the top of the screen when scrolling.
    #For example, passing stickyHeaderIndices={[0]} will cause the first child to be fixed to the top of the scroll view.
    #This property is not supported in conjunction with horizontal={true}.
    stickyHeaderIndices: [number]

  movement:
    decelerationRate: enum('fast', 'normal', number)
    disableIntervalMomentum: false


  scroll interactions:
    canCancelContentTouches: true #ios
    pinchGestureEnabled: true #ios
    directionalLockEnabled: false #ios
    disableScrollViewPanResponder: false
    keyboardDismissMode: enum('none'* , 'on-drag', 'interactive')
    keyboardShouldPersistTaps: enum('always'*, 'never', 'handled', false, true)

    nestedScrollEnabled: andoid #(supported by default on ios)

    #When true, the scroll view can be programmatically scrolled beyond its content size.
    scrollToOverflowEnabled: false

    #When true, the scroll view scrolls to top when the status bar is tapped.
    scrollsToTop: true

    #ios - This controls how often the scroll event will be fired while scrolling (as a time interval in ms).
    #A lower number yields better accuracy for code that is tracking the scroll position, but can lead to scroll performance problems due to the volume of information being send over the bridge.
    #You will not notice a difference between values set between 1-16 as the JS run loop is synced to the screen refresh rate.
    #If you do not need precise scroll position tracking, set this value higher to limit the information being sent across the bridge.
    #The default value is zero, which results in the scroll event being sent only once each time the view is scrolled.
    scrollEventThrottle: 0

    #android
    #Used to override default value of overScroll mode.
    #Possible values:
    #'auto' - Default value, allow a user to over-scroll this view only if the content is large enough to meaningfully scroll.
    #'always' - Always allow a user to over-scroll this view.
    #'never' - Never allow a user to over-scroll this view.
    overScrollMode: enum('auto'*, 'always', 'never')

  style:
    endFillColor: color  #android
    indicatorStyle: enum('default'*, 'black', 'white') #ios

  zoom:
    maximumZoomScale: 1.0
    minimumZoomScale: 1.0
    #The current scale of the scroll view content.
    zoomScale: 1.0

  Extra:
    scrollBarThumbImage: vr
    scrollPerfTag: android #useless developer log